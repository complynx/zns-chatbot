from contextlib import asynccontextmanager
import json
import re
import os
import mimetypes
import tempfile
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton, WebAppInfo
from telegram.ext import (
    CallbackContext,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    Application,
    CallbackQueryHandler,
)
import logging

from .food import MealContext
from .photo_task import get_by_user, PhotoTask

logger = logging.getLogger(__name__)

PHOTO, CROPPER, UPSCALE, FINISH = range(4)
NAME, WAITING_PAYMENT = range(2)

web_app_base = ""
cover = "static/cover.jpg"

async def avatar_error(update: Update, context: CallbackContext):
    reply_markup = ReplyKeyboardRemove()
    try:
        get_by_user(update.effective_user.id).delete()
    except KeyError:
        pass
    except Exception as e:
        logger.error("Exception in avatar_error: %s", e, exc_info=1)
    await update.message.reply_text(
        "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n/avatar",
        reply_markup=reply_markup
    )
    return ConversationHandler.END

async def start(update: Update, context: CallbackContext):
    """Send a welcome message when the /start command is issued."""
    logger.info(f"start called: {update.effective_user}")
    await context.bot.set_my_commands([("/avatar", "–°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä.")])
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –∑—É–∫–æ–Ω–∞–≤—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ó–∏–ù—É–°—è, —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ ü§ó\n\n"+
        "üü¢ –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å–¥–µ–ª–∞—Ç—å –∫—Ä–∞—Å–∏–≤—É—é –∞–≤–∞—Ç–∞—Ä–∫—É! –î–ª—è —ç—Ç–æ–≥–æ –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É\n"+
        "/avatar"
    )

async def avatar(update: Update, context: CallbackContext):
    """Handle the /avatar command, requesting a photo."""
    logger.info(f"Received /avatar command from {update.effective_user}")
    _ = PhotoTask(update.effective_chat, update.effective_user)
    markup = ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        "üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—ë –ª—É—á—à–µ–µ —Ñ–æ—Ç–æ.\n\nP.S. –ï—Å–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ —è "+
        "—É—Å–Ω—É–ª–∞, —Ç–æ –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–±—É–¥–∏ –º–µ–Ω—è, —Å–Ω–æ–≤–∞ –≤—ã–±—Ä–∞–≤ –∫–æ–º–∞–Ω–¥—É\n/avatar",
        reply_markup=markup
    )
    return PHOTO

async def reavatar(update: Update, context: CallbackContext):
    logger.info(f"Avatar submission for {update.effective_user} canceled")
    try:
        get_by_user(update.effective_user.id).delete()
    except KeyError:
        pass
    except Exception as e:
        logger.error("Exception in cancel: %s", e, exc_info=1)
    await update.message.reply_text("–ü—Ä–µ–¥—ã–¥—É—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return await avatar(update, context)

async def photo_stage2(update: Update, context: CallbackContext, file_path:str, file_ext:str):
    try:
        task = get_by_user(update.effective_user.id)
    except KeyError:
        return await avatar_error(update, context)
    except Exception as e:
        logger.error("Exception in photo_stage2: %s", e, exc_info=1)
        return await avatar_error(update, context)
    task.add_file(file_path, file_ext)
    buttons = [
        [KeyboardButton("–í—ã–±—Ä–∞—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(f"{web_app_base}/fit_frame?id={task.id.hex}"))],
        ["–¢–∞–∫ —Å–æ–π–¥—ë—Ç"],["–û—Ç–º–µ–Ω–∞"]
    ]


    markup = ReplyKeyboardMarkup(
        buttons,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await update.message.reply_text(
        "–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ –æ–Ω–æ –±—É–¥–µ—Ç —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ —Ä–∞–º–∫–∏.",
        reply_markup=markup
    )
    return CROPPER

async def autocrop(update: Update, context: CallbackContext):
    try:
        task = get_by_user(update.effective_user.id)
    except KeyError:
        return await avatar_error(update, context)
    except Exception as e:
        logger.error("Exception in autocrop: %s", e, exc_info=1)
        return await avatar_error(update, context)
    await update.message.reply_text(f"–ê–≤–∞—Ç–∞—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è... üîÑ", reply_markup=ReplyKeyboardRemove())
    
    try:
        await task.resize_avatar()
    except Exception as e:
        logger.error("Exception in autocrop: %s", e, exc_info=1)
        return await avatar_error(update, context)
    return await cropped_st2(task, update, context)

async def cropped_st2(task: PhotoTask, update: Update, context: CallbackContext):
    try:
        await update.message.reply_text(
            "ü™ê –£–∂–µ —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ —Ç–≤–æ—ë —á—É–¥–µ—Å–Ω–æ–µ —Ñ–æ—Ç–æ —Å—Ç–∞–Ω–µ—Ç –µ—â—ë –∏ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–º! –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω...",
            reply_markup=ReplyKeyboardRemove()
        )
        await task.finalize_avatar()
        await update.message.reply_document(task.get_final_file(), filename="avatar.jpg")
        await update.message.reply_document(
            cover,
            caption="‚ùóÔ∏è–ü–æ–ª—É—á–∏–≤—à—É—é—Å—è –∞–≤–∞—Ç–∞—Ä–∫—É —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∂–∞—Ç—å –≤ –ª–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –í–∫–æ–Ω—Ç–∞–∫—Ç–µ "+
            "–≤–º–µ—Å—Ç–µ —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ–±–ª–æ–∂–∫–æ–π –ø—Ä–æ—Ñ–∏–ª—è."
        )
        await update.message.reply_text(
            "üîÅ –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ, —Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ —Å–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É\n"+
            "/avatar\n\nüõ∏ –í—Å—ë –≥–æ—Ç–æ–≤–æ! –î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ ZNS! üêã",
            reply_markup=ReplyKeyboardRemove()
        )
    except Exception as e:
        logger.error("Exception in cropped_st2: %s", e, exc_info=1)
        return await avatar_error(update, context)
    
    task.delete()
    return ConversationHandler.END

async def image_crop_matrix(update: Update, context):
    try:
        task = get_by_user(update.effective_user.id)
    except KeyError:
        return await avatar_error(update, context)
    except Exception as e:
        logger.error("Exception in image_crop_matrix: %s", e, exc_info=1)
        return await avatar_error(update, context)
    try:
        data = json.loads(update.effective_message.web_app_data.data)
        id_str = data['id']
        a = float(data['a'])
        b = float(data['b'])
        c = float(data['c'])
        d = float(data['d'])
        e = float(data['e'])
        f = float(data['f'])
    except Exception as e:
        logger.error("Exception in image_crop_matrix: %s", e, exc_info=1)
        return await avatar_error(update, context)
    if task.id.hex != id_str:
        return await avatar_error(update, context)
    await update.message.reply_text(f"–ê–≤–∞—Ç–∞—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...", reply_markup=ReplyKeyboardRemove())
    
    try:
        await task.transform_avatar(a,b,c,d,e,f)
    except Exception as e:
        logger.error("Exception in image_crop_matrix: %s", e, exc_info=1)
        return await avatar_error(update, context)
    return await cropped_st2(task, update, context)

async def photo(update: Update, context: CallbackContext):
    """Handle the photo submission as photo"""
    logger.info(f"Received avatar photo from {update.effective_user}")

    photo_file = await update.message.photo[-1].get_file()
    file_name = f"{photo_file.file_id}.jpg"
    file_path = os.path.join(tempfile.gettempdir(), file_name)
    
    await photo_file.download_to_drive(file_path)
    return await photo_stage2(update, context, file_path, "jpg")

async def photo_doc(update: Update, context: CallbackContext):
    """Handle the photo submission as document"""
    logger.info(f"Received avatar document from {update.effective_user}")

    document = update.message.document

    # Download the document
    document_file = await document.get_file()
    file_ext = mimetypes.guess_extension(document.mime_type)
    file_path = os.path.join(tempfile.gettempdir(), f"{document.file_id}.{file_ext}")
    await document_file.download_to_drive(file_path)
    return await photo_stage2(update, context, file_path, file_ext)

async def cancel_avatar(update: Update, context: CallbackContext):
    """Handle the cancel command during the avatar submission."""
    logger.info(f"Avatar submission for {update.effective_user} canceled")
    try:
        get_by_user(update.effective_user.id).delete()
    except KeyError:
        pass
    except Exception as e:
        logger.error("Exception in cancel: %s", e, exc_info=1)
    reply_markup = ReplyKeyboardRemove()
    await update.message.reply_text("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=reply_markup)
    return ConversationHandler.END

async def food(update: Update, context: CallbackContext):
    """Handle the /food command, requesting a photo."""
    logger.info(f"Received /food command from {update.effective_user}")
    _ = PhotoTask(update.effective_chat, update.effective_user)
    markup = ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_html(
        "–û–∫–µ–π, —è –ø—Ä–∏–º—É –∑–∞–∫–∞–∑ –Ω–∞ –µ–¥—É. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏, –¥–ª—è –∫–æ–≥–æ –±—É–¥–µ—Ç –µ–¥–∞. "+
        "–ù–∞–ø–∏—à–∏ –ø–æ–ª–Ω—ã–µ <b>–∏–º—è</b> –∏ <b>—Ñ–∞–º–∏–ª–∏—é</b> –∑—É–∫–æ–Ω–∞–≤—Ç–∞.",
        reply_markup=markup
    )
    return NAME

async def food_for_who(update: Update, context: CallbackContext):
    """Handle the cancel command during the avatar submission."""
    name = update.message.text
    logger.info(f"Received meal acceptor name from {update.effective_user}: {name}")
    async with MealContext(
        tg_user_id=update.effective_user.id,
        tg_username=update.effective_user.username,
        tg_user_first_name=update.effective_user.first_name,
        tg_user_last_name=update.effective_user.last_name,
        for_who=name,
    ) as meal_context:
        # f"{web_app_base}/fit_frame?id={task.id.hex}"
        reply_markup = ReplyKeyboardRemove()
        await update.message.reply_html(
            f"–û—Ç–ª–∏—á–Ω–æ, —Å–æ—Å—Ç–∞–≤–ª—è–µ–º –º–µ–Ω—é –¥–ª—è –∑—É–∫–æ–Ω–∞–≤—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ {name}. –î–ª—è –≤—ã–±–æ—Ä–∞ –±–ª—é–¥, "+
            f"<a href=\"{web_app_base}{meal_context.link}\">–∂–º–∏ —Å—é–¥–∞ (—Å—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 24 —á–∞—Å–∞)</a>.",
            reply_markup=reply_markup
        )
    return ConversationHandler.END

async def food_cancel(update: Update, context: CallbackContext):
    """Handle the cancel command during the avatar submission."""
    logger.info(f"Food conversation for {update.effective_user} canceled")
    reply_markup = ReplyKeyboardRemove()
    await update.message.reply_text("–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=reply_markup)
    return ConversationHandler.END

async def food_choice_reply_payment(update: Update, context) -> int:
    """Handle payment answer after menu received"""
    # Get CallbackQuery from Update
    query = update.callback_query
    logger.info(f"Received food_choice_reply_payment from {update.effective_user}, query: {query}")
    # CallbackQueries need to be answered, even if no notification to the user is needed
    # Some clients may have trouble otherwise. See https://core.telegram.org/bots/api#callbackquery
    await query.answer()

    # Instead of sending a new message, edit the message that
    # originated the CallbackQuery. This gives the feeling of an
    # interactive menu.
    await query.edit_message_text(text="–ü—Ä–∏—à–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ —Ñ–∞–π–ª–∞.", reply_markup=ReplyKeyboardRemove())
    # return WAITING_PAYMENT
    return ConversationHandler.END

async def food_choice_reply_cancel(update: Update, context) -> int:
    """Handle payment answer after menu received"""
    # Get CallbackQuery from Update
    query = update.callback_query
    logger.info(f"Received food_choice_reply_payment from {update.effective_user}, query: {query}")
    # CallbackQueries need to be answered, even if no notification to the user is needed
    # Some clients may have trouble otherwise. See https://core.telegram.org/bots/api#callbackquery
    await query.answer()

    # Instead of sending a new message, edit the message that
    # originated the CallbackQuery. This gives the feeling of an
    # interactive menu.
    await query.edit_message_text(text="–Ø –æ—Ç–º–µ–Ω–∏–ª–∞ —ç—Ç–æ—Ç –≤—ã–±–æ—Ä.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# async def log_msg(update: Update, context: CallbackContext):
#     logger.info(f"got message from user {update.effective_user}: {update.message}")

async def error_handler(update, context):
    logger.error(msg="Exception while handling an update:", exc_info=context.error)


@asynccontextmanager
async def create_telegram_bot(config, app) -> Application:
    global web_app_base
    application = ApplicationBuilder().token(token=config.telegram_token).build()
    application.base_app = app

    web_app_base = config.server_base
    # Conversation handler for /–∞–≤–∞—Ç–∞—Ä command
    ava_handler = ConversationHandler(
        entry_points=[CommandHandler("avatar", avatar)],
        states={
            PHOTO: [
                MessageHandler(filters.PHOTO, photo),
                MessageHandler(filters.Document.IMAGE, photo_doc)
            ],
            CROPPER: [
                MessageHandler(filters.StatusUpdate.WEB_APP_DATA, image_crop_matrix),
                MessageHandler(filters.Regex(re.compile("^(–¢–∞–∫ —Å–æ–π–¥—ë—Ç)$", re.I)), autocrop),
            ],
            FINISH: [MessageHandler(filters.Regex(".*"), cancel_avatar)],
        },
        fallbacks=[
            CommandHandler("cancel", cancel_avatar),
            CommandHandler("avatar", reavatar),
            MessageHandler(filters.Regex(re.compile("^(Cancel|–û—Ç–º–µ–Ω–∞)$", re.I|re.U)), cancel_avatar)
        ],
    )
    food_handler = ConversationHandler(
        entry_points=[CommandHandler("food", food)],
        states={
            NAME: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND & ~filters.Regex(re.compile("^(Cancel|–û—Ç–º–µ–Ω–∞)$", re.I|re.U)),
                    food_for_who
                )
            ],
        },
        fallbacks=[
            CommandHandler("cancel", food_cancel),
            MessageHandler(filters.Regex(re.compile("^(Cancel|–û—Ç–º–µ–Ω–∞)$", re.I|re.U)), food_cancel)
        ],
    )
    food_stage2_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(food_choice_reply_payment, pattern="^food_choice_reply_payment|[a-zA-Z_\\-0-9]$"),
            CallbackQueryHandler(food_choice_reply_cancel, pattern="^food_choice_reply_cancel|[a-zA-Z_\\-0-9]$"),
        ],
        states={
            WAITING_PAYMENT: [],
        },
        fallbacks=[
            # CallbackQueryHandler(food_choice_reply_cancel, pattern="^food_choice_reply_cancel|[a-zA-Z_-0-9]$"),
            # CommandHandler("cancel", food_cancel),
            # MessageHandler(filters.Regex(re.compile("^(Cancel|–û—Ç–º–µ–Ω–∞)$", re.I|re.U)), food_cancel)
        ],
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(food_handler)
    application.add_handler(ava_handler)
    application.add_handler(food_stage2_handler)
    # application.add_handler(MessageHandler(filters.TEXT, log_msg))
    application.add_error_handler(error_handler)
    
    try:
        await application.initialize()
        await application.start()
        await application.updater.start_polling()

        app.bot = application
        yield application
    finally:
        app.bot = None
        await application.stop()
        await application.updater.stop()
        await application.shutdown()
