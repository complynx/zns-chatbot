from contextlib import asynccontextmanager
import datetime
import json
import re
import os
import mimetypes
import tempfile
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    KeyboardButton,
    WebAppInfo,
)
from telegram.ext import (
    CallbackContext,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    Application,
    CallbackQueryHandler,
)
from telegram.constants import ParseMode
import logging
import shutil

from .food import MealContext, get_csv
from .photo_task import get_by_user, PhotoTask

logger = logging.getLogger(__name__)

PHOTO, CROPPER, UPSCALE, FINISH = range(4)
NAME, WAITING_PAYMENT_PROOF = range(2)

web_app_base = ""
cover = "static/cover.jpg"

async def avatar_error(update: Update, context: CallbackContext):
    reply_markup = ReplyKeyboardRemove()
    try:
        get_by_user(update.effective_user.id).delete()
    except KeyError:
        pass
    except Exception as e:
        logger.error("Exception in avatar_error: %s", e, exc_info=1)
    await update.message.reply_text(
        "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n/avatar",
        reply_markup=reply_markup
    )
    return ConversationHandler.END

async def start(update: Update, context: CallbackContext):
    """Send a welcome message when the /start command is issued."""
    logger.info(f"start called: {update.effective_user}")
    await context.bot.set_my_commands([
        ("/avatar", "–°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä."),
        # ("/food", "–ó–∞–∫–∞–∑–∞—Ç—å –µ–¥—É."),
    ])
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –∑—É–∫–æ–Ω–∞–≤—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ó–∏–ù—É–°—è, —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ ü§ó\n\n"+
        "üü¢ –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –∑–∞–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –≥–æ—Ä—è—á–µ–µ –ø–∏—Ç–∞–Ω–∏–µ –∏ —Å–¥–µ–ª–∞—Ç—å –∫—Ä–∞—Å–∏–≤—É—é –∞–≤–∞—Ç–∞—Ä–∫—É! –î–ª—è —ç—Ç–æ–≥–æ –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É:\n"+
        # "/food - –∑–∞–∫–∞–∑ –≥–æ—Ä—è—á–µ–≥–æ –ø–∏—Ç–∞–Ω–∏—è\n"+
        "/avatar - —Å–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É"
    )

async def avatar(update: Update, context: CallbackContext):
    """Handle the /avatar command, requesting a photo."""
    logger.info(f"Received /avatar command from {update.effective_user}")
    _ = PhotoTask(update.effective_chat, update.effective_user)
    markup = ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        "üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—ë –ª—É—á—à–µ–µ —Ñ–æ—Ç–æ.\n\nP.S. –ï—Å–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ —è "+
        "—É—Å–Ω—É–ª–∞, —Ç–æ –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–±—É–¥–∏ –º–µ–Ω—è, —Å–Ω–æ–≤–∞ –≤—ã–±—Ä–∞–≤ –∫–æ–º–∞–Ω–¥—É\n/avatar",
        reply_markup=markup
    )
    return PHOTO

async def reavatar(update: Update, context: CallbackContext):
    logger.info(f"Avatar submission for {update.effective_user} canceled")
    try:
        get_by_user(update.effective_user.id).delete()
    except KeyError:
        pass
    except Exception as e:
        logger.error("Exception in cancel: %s", e, exc_info=1)
    await update.message.reply_text("–ü—Ä–µ–¥—ã–¥—É—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return await avatar(update, context)

async def photo_stage2(update: Update, context: CallbackContext, file_path:str, file_ext:str):
    try:
        task = get_by_user(update.effective_user.id)
    except KeyError:
        return await avatar_error(update, context)
    except Exception as e:
        logger.error("Exception in photo_stage2: %s", e, exc_info=1)
        return await avatar_error(update, context)
    task.add_file(file_path, file_ext)
    buttons = [
        [KeyboardButton("–í—ã–±—Ä–∞—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(f"{web_app_base}/fit_frame?id={task.id.hex}"))],
        ["–¢–∞–∫ —Å–æ–π–¥—ë—Ç"],["–û—Ç–º–µ–Ω–∞"]
    ]


    markup = ReplyKeyboardMarkup(
        buttons,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await update.message.reply_text(
        "–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ –æ–Ω–æ –±—É–¥–µ—Ç —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ —Ä–∞–º–∫–∏.",
        reply_markup=markup
    )
    return CROPPER

async def autocrop(update: Update, context: CallbackContext):
    try:
        task = get_by_user(update.effective_user.id)
    except KeyError:
        return await avatar_error(update, context)
    except Exception as e:
        logger.error("Exception in autocrop: %s", e, exc_info=1)
        return await avatar_error(update, context)
    await update.message.reply_text(f"–ê–≤–∞—Ç–∞—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è... üîÑ", reply_markup=ReplyKeyboardRemove())
    
    try:
        await task.resize_avatar()
    except Exception as e:
        logger.error("Exception in autocrop: %s", e, exc_info=1)
        return await avatar_error(update, context)
    return await cropped_st2(task, update, context)

async def cropped_st2(task: PhotoTask, update: Update, context: CallbackContext):
    try:
        await update.message.reply_text(
            "ü™ê –£–∂–µ —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ —Ç–≤–æ—ë —á—É–¥–µ—Å–Ω–æ–µ —Ñ–æ—Ç–æ —Å—Ç–∞–Ω–µ—Ç –µ—â—ë –∏ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–º! –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω...",
            reply_markup=ReplyKeyboardRemove()
        )
        await task.finalize_avatar()
        await update.message.reply_document(task.get_final_file(), filename="avatar.jpg")
        await update.message.reply_document(
            cover,
            caption="‚ùóÔ∏è–ü–æ–ª—É—á–∏–≤—à—É—é—Å—è –∞–≤–∞—Ç–∞—Ä–∫—É —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∂–∞—Ç—å –≤ –ª–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –í–∫–æ–Ω—Ç–∞–∫—Ç–µ "+
            "–≤–º–µ—Å—Ç–µ —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ–±–ª–æ–∂–∫–æ–π –ø—Ä–æ—Ñ–∏–ª—è."
        )
        await update.message.reply_text(
            "üîÅ –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ, —Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ —Å–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É\n"+
            "/avatar\n\nüõ∏ –í—Å—ë –≥–æ—Ç–æ–≤–æ! –î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ ZNS! üêã",
            reply_markup=ReplyKeyboardRemove()
        )
    except Exception as e:
        logger.error("Exception in cropped_st2: %s", e, exc_info=1)
        return await avatar_error(update, context)
    
    task.delete()
    return ConversationHandler.END

async def image_crop_matrix(update: Update, context):
    try:
        task = get_by_user(update.effective_user.id)
    except KeyError:
        return await avatar_error(update, context)
    except Exception as e:
        logger.error("Exception in image_crop_matrix: %s", e, exc_info=1)
        return await avatar_error(update, context)
    try:
        data = json.loads(update.effective_message.web_app_data.data)
        id_str = data['id']
        a = float(data['a'])
        b = float(data['b'])
        c = float(data['c'])
        d = float(data['d'])
        e = float(data['e'])
        f = float(data['f'])
    except Exception as e:
        logger.error("Exception in image_crop_matrix: %s", e, exc_info=1)
        return await avatar_error(update, context)
    if task.id.hex != id_str:
        return await avatar_error(update, context)
    await update.message.reply_text(f"–ê–≤–∞—Ç–∞—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...", reply_markup=ReplyKeyboardRemove())
    
    try:
        await task.transform_avatar(a,b,c,d,e,f)
    except Exception as e:
        logger.error("Exception in image_crop_matrix: %s", e, exc_info=1)
        return await avatar_error(update, context)
    return await cropped_st2(task, update, context)

async def photo(update: Update, context: CallbackContext):
    """Handle the photo submission as photo"""
    logger.info(f"Received avatar photo from {update.effective_user}")

    photo_file = await update.message.photo[-1].get_file()
    file_name = f"{photo_file.file_id}.jpg"
    file_path = os.path.join(tempfile.gettempdir(), file_name)
    
    await photo_file.download_to_drive(file_path)
    return await photo_stage2(update, context, file_path, "jpg")

async def photo_doc(update: Update, context: CallbackContext):
    """Handle the photo submission as document"""
    logger.info(f"Received avatar document from {update.effective_user}")

    document = update.message.document

    # Download the document
    document_file = await document.get_file()
    file_ext = mimetypes.guess_extension(document.mime_type)
    file_path = os.path.join(tempfile.gettempdir(), f"{document.file_id}.{file_ext}")
    await document_file.download_to_drive(file_path)
    return await photo_stage2(update, context, file_path, file_ext)

async def cancel_avatar(update: Update, context: CallbackContext):
    """Handle the cancel command during the avatar submission."""
    logger.info(f"Avatar submission for {update.effective_user} canceled")
    try:
        get_by_user(update.effective_user.id).delete()
    except KeyError:
        pass
    except Exception as e:
        logger.error("Exception in cancel: %s", e, exc_info=1)
    reply_markup = ReplyKeyboardRemove()
    await update.message.reply_text("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=reply_markup)
    return ConversationHandler.END

async def food(update: Update, context: CallbackContext):
    """Handle the /food command, requesting a photo."""
    logger.info(f"Received /food command from {update.effective_user}")
    _ = PhotoTask(update.effective_chat, update.effective_user)
    markup = ReplyKeyboardMarkup(
        [[update.effective_user.full_name],["–û—Ç–º–µ–Ω–∞"]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await update.message.reply_html(
        "–ü—Ä–∏–≤–µ—Ç, –∑—É–∫–æ–Ω–∞–≤—Ç! –ù–∞—à–∞ –∑–≤—ë–∑–¥–Ω–∞—è –∫—É—Ö–Ω—è –≥–æ—Ç–æ–≤–∞ –ø—Ä–∏–Ω—è—Ç—å —Ç–≤–æ–π –∑–∞–∫–∞–∑! –ß–µ–≥–æ –∏–∑–≤–æ–ª–∏—Ç–µ? üññ\n\n"+
        "–ù–∞–ø–∏—à–∏ –ø–æ–ª–Ω—ã–µ <u>–∏–º—è</u> –∏ <u>—Ñ–∞–º–∏–ª–∏—é</u> –∑—É–∫–æ–Ω–∞–≤—Ç–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ–º —Å–æ–±–∏—Ä–∞—Ç—å –º–µ–Ω—é.",
        reply_markup=markup
    )
    return NAME

async def food_for_who(update: Update, context: CallbackContext):
    """Handle the cancel command during the avatar submission."""
    name = update.message.text
    logger.info(f"Received for_who from {update.effective_user}: {name}")
    try:
        async with MealContext(
            tg_user_id=update.effective_user.id,
            tg_username=update.effective_user.username,
            tg_user_first_name=update.effective_user.first_name,
            tg_user_last_name=update.effective_user.last_name,
            for_who=name,
        ) as meal_context:
            # f"{web_app_base}/fit_frame?id={task.id.hex}"
            reply_markup = ReplyKeyboardRemove()
            await update.message.reply_html(
                f"–û—Ç–ª–∏—á–Ω–æ, —Å–æ—Å—Ç–∞–≤–ª—è–µ–º –º–µ–Ω—é –¥–ª—è –∑—É–∫–æ–Ω–∞–≤—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ <i>{name}</i>. –î–ª—è –≤—ã–±–æ—Ä–∞ –±–ª—é–¥, "+
                f"<a href=\"{web_app_base}{meal_context.link}\">–∂–º–∏ —Å—é–¥–∞ (—Å—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 24 —á–∞—Å–∞)</a>.",
                reply_markup=reply_markup
            )
    except Exception as e:
        logger.error("Exception in food_for_who: %s", e, exc_info=1)
    return ConversationHandler.END

async def food_cancel(update: Update, context: CallbackContext):
    """Handle the cancel command during the avatar submission."""
    logger.info(f"Food conversation for {update.effective_user} canceled")
    reply_markup = ReplyKeyboardRemove()
    await update.message.reply_text("–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=reply_markup)
    return ConversationHandler.END

CANCEL_FOOD_STAGE2_REPLACEMENT_TEXT = "–≠—Ç–æ—Ç –≤—ã–±–æ—Ä –º–µ–Ω—é –æ—Ç–º–µ–Ω—ë–Ω. –î–ª—è –Ω–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞ –º–æ–∂–Ω–æ —Å–Ω–æ–≤–∞ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /food"

async def food_choice_reply_payment(update: Update, context: CallbackContext) -> int:
    """Handle payment answer after menu received"""
    # Get CallbackQuery from Update
    try:
        query = update.callback_query
        logger.info(f"Received food_choice_reply_payment from {update.effective_user}, query: {query}")
        # CallbackQueries need to be answered, even if no notification to the user is needed
        # Some clients may have trouble otherwise. See https://core.telegram.org/bots/api#callbackquery
        await query.answer()
        id = query.data.split("|")[1]
        async with MealContext.from_id(id) as meal_context:
            meal_context.marked_payed = datetime.datetime.now()
            meal_context.message_inline_id = query.inline_message_id
            meal_context.message_self_id = query.message.message_id
            meal_context.message_chat_id = query.message.chat_id
        logger.info(f"MealContext ID: {id}")
        await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup([]))
        if context.user_data is None:
            context.user_data.update(dict())
        context.user_data["food_choice_id"] = id

        markup = ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä –µ–¥—ã"]], resize_keyboard=True, one_time_keyboard=True)
        await context.bot.send_message(
            update.effective_user.id,
            "–û–∫, –∂–¥—É —Å–∫—Ä–∏–Ω –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã.",
            reply_markup=markup
        )
        return WAITING_PAYMENT_PROOF
    except FileNotFoundError:
        logger.info("MealContext file not found in food_choice_reply_payment.")
        await query.edit_message_text(
            "–ß—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–µ —Å–ª—É—á–∏–ª–æ—Å—å —Å –≤–∞—à–∏–º –∑–∞–∫–∞–∑–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑: /food",
            reply_markup=InlineKeyboardMarkup([]))
        return ConversationHandler.END
    except Exception as e:
        logger.error("Exception in food_choice_reply_payment: %s", e, exc_info=1)

async def food_choice_reply_cancel(update: Update, context) -> int:
    """Handle payment answer after menu received"""
    # Get CallbackQuery from Update
    query = update.callback_query
    logger.info(f"Received food_choice_reply_payment from {update.effective_user}, query: {query}")
    # CallbackQueries need to be answered, even if no notification to the user is needed
    # Some clients may have trouble otherwise. See https://core.telegram.org/bots/api#callbackquery
    await query.answer()
    id = query.data.split("|")[1]
    try:
        async with MealContext.from_id(id) as meal_context:
            await meal_context.cancel()
    except FileNotFoundError:
        pass # already cancelled
    # Instead of sending a new message, edit the message that
    # originated the CallbackQuery. This gives the feeling of an
    # interactive menu.
    await query.edit_message_text(
        text=CANCEL_FOOD_STAGE2_REPLACEMENT_TEXT
    )
    return ConversationHandler.END

async def food_choice_conversation_cancel(update: Update, context: CallbackContext) -> int:
    """Cancel food choice conversation"""
    logger.info(f"Received food_choice_conversation_cancel from {update.effective_user}")
    try:
        id = context.user_data["food_choice_id"]
        async with MealContext.from_id(id) as meal_context:
            if meal_context.message_inline_id:
                await context.bot.edit_message_text(
                    inline_message_id=meal_context.message_inline_id,
                    text=CANCEL_FOOD_STAGE2_REPLACEMENT_TEXT
                )
            else:
                await context.bot.edit_message_text(
                    message_id=meal_context.message_self_id,
                    chat_id=meal_context.message_chat_id,
                    text=CANCEL_FOOD_STAGE2_REPLACEMENT_TEXT
                )
            await meal_context.cancel()
        del context.user_data["food_choice_id"]
    except FileNotFoundError or KeyError:
        pass
    except Exception as e:
        logger.error("Exception in food_choice_conversation_cancel: %s", e, exc_info=1)

    await update.message.reply_text(
        text="–í—ã–±–æ—Ä –º–µ–Ω—é –æ—Ç–º–µ–Ω—ë–Ω. –î–ª—è –Ω–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞ –º–æ–∂–Ω–æ —Å–Ω–æ–≤–∞ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /food",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def food_choice_payment_photo(update: Update, context: CallbackContext) -> int:
    """Received payment proof as image"""
    logger.info(f"Received food_choice_payment_photo from {update.effective_user}")

    photo_file = await update.message.photo[-1].get_file()
    file_name = f"{photo_file.file_id}.jpg"
    file_path = os.path.join(tempfile.gettempdir(), file_name)
    await photo_file.download_to_drive(file_path)
    return await food_choice_payment_stage2(update, context, file_path)

async def food_choice_payment_doc(update: Update, context: CallbackContext) -> int:
    """Received payment proof as file"""
    logger.info(f"Received food_choice_payment_doc from {update.effective_user}")
    
    document = update.message.document

    document_file = await document.get_file()
    file_ext = mimetypes.guess_extension(document.mime_type)
    file_name = f"{document.file_id}.{file_ext}"
    file_path = os.path.join(tempfile.gettempdir(), file_name)
    await document_file.download_to_drive(file_path)
    return await food_choice_payment_stage2(update, context, file_path)

ADMIN_PROOVING_PAYMENT = 1012402779 # darrel
# ADMIN_PROOVING_PAYMENT = 379278985 # me
FOOD_ADMINS = [
    1012402779, # darrel
    379278985, # me
    20538574, # love_zelensky
    249413857, # vbutman
]

async def food_choice_admin_proof_confirmed(update: Update, context: CallbackContext):
    """Handle admin proof"""
    if update.effective_user.id != ADMIN_PROOVING_PAYMENT:
        return # check admin
    # Get CallbackQuery from Update
    query = update.callback_query
    logger.info(f"Received food_choice_admin_proof_confirmed from {update.effective_user}, query: {query}")
    # CallbackQueries need to be answered, even if no notification to the user is needed
    # Some clients may have trouble otherwise. See https://core.telegram.org/bots/api#callbackquery
    await query.answer()
    id = query.data.split("|")[1]
    async with MealContext.from_id(id) as meal_context:
        meal_context.payment_confirmed = True
        meal_context.payment_confirmed_date = datetime.datetime.now()
    
        await query.edit_message_text(
            f"–ü–∏—Ç–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <i>{meal_context.tg_user_first_name} {meal_context.tg_user_last_name}</i>"+
            f" –¥–ª—è –∑—É–∫–æ–Ω–∞–≤—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ <i>{meal_context.for_who}</i> –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup([])
        )
        await context.bot.send_message(
            meal_context.tg_user_id,
            f"–ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–∫–∞–∑ –Ω–∞ –ø–∏—Ç–∞–Ω–∏–µ"+
            f" –¥–ª—è –∑—É–∫–æ–Ω–∞–≤—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ <i>{meal_context.for_who}</i>.\n–ñ–¥—ë–º —Ç–µ–±—è –Ω–∞ ZNS.",
            parse_mode=ParseMode.HTML,
        )

async def food_choice_admin_proof_declined(update: Update, context: CallbackContext):
    """Handle admin proof"""
    if update.effective_user.id != ADMIN_PROOVING_PAYMENT:
        return # check admin
    # Get CallbackQuery from Update
    query = update.callback_query
    logger.info(f"Received food_choice_admin_proof_declined from {update.effective_user}, query: {query}")
    # CallbackQueries need to be answered, even if no notification to the user is needed
    # Some clients may have trouble otherwise. See https://core.telegram.org/bots/api#callbackquery
    await query.answer()
    id = query.data.split("|")[1]
    async with MealContext.from_id(id) as meal_context:
        meal_context.payment_declined = True
        meal_context.payment_declined_date = datetime.datetime.now()
    
        await query.edit_message_text(
            f"–ü–∏—Ç–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <i>{meal_context.tg_user_first_name} {meal_context.tg_user_last_name}</i>"+
            f" –¥–ª—è –∑—É–∫–æ–Ω–∞–≤—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ <i>{meal_context.for_who}</i> –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup([])
        )
        await context.bot.send_message(
            meal_context.tg_user_id,
            f"–ê–¥–º–∏–Ω –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ –Ω–∞ –ø–∏—Ç–∞–Ω–∏–µ"+
            f" –¥–ª—è –∑—É–∫–æ–Ω–∞–≤—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ <i>{meal_context.for_who}</i>.\n"+
            "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥—Ä—É–≥–æ–π –∑–∞–∫–∞–∑, –º–æ–∂–Ω–æ —Å–Ω–æ–≤–∞ –≤—ã–∑–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /food",
            parse_mode=ParseMode.HTML,
        )

async def food_choice_payment_stage2(update: Update, context: CallbackContext, received_file) -> int:
    await update.message.reply_text(
        text="–Ø –ø–µ—Ä–µ—Å–ª–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º. –û–Ω–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç –∏ —è –≤–µ—Ä–Ω—É—Å—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º.",
        reply_markup=ReplyKeyboardRemove()
    )
    
    try:
        id = context.user_data["food_choice_id"]
        del context.user_data["food_choice_id"]
    except KeyError:
        logger.error("food_choice_id not found in food_choice_payment_stage2")
        await update.message.reply_text(
            text="–í–æ–∑–Ω–∏–∫–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –≤–∞—à–∏–º –∑–∞–∫–∞–∑–æ–º,"+
            " –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–¥—ë—Ç—Å—è –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑: /food",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    try:
        async with MealContext.from_id(id) as meal_context:
            proof_file_name = os.path.splitext(meal_context.filename)[0] + ".proof" + os.path.splitext(received_file)[1]
            shutil.move(received_file, proof_file_name)
            meal_context.proof_file = proof_file_name
            meal_context.proof_received = datetime.datetime.now()

            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ", callback_data=f"FoodChoiceAdmConf|{meal_context.id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑", callback_data=f"FoodChoiceAdmDecl|{meal_context.id}"),
                ]
            ]
            await update.message.forward(ADMIN_PROOVING_PAYMENT)
            await context.bot.send_message(
                ADMIN_PROOVING_PAYMENT,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <i>{update.effective_user.full_name}</i> –ø—Ä–∏—Å–ª–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –µ–¥—ã"+
                f" –¥–ª—è –∑—É–∫–æ–Ω–∞–≤—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ <i>{meal_context.for_who}</i>. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.\n"+
                "<b>–í–Ω–∏–º–∞–Ω–∏–µ</b>, –Ω–µ —Å—Ç–æ–∏—Ç –ø–æ–º–µ—á–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–ø–ª–∞—Ç—ã —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, –ª—É—á—à–µ —Å–Ω–∞—á–∞–ª–∞ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–∏—Ç—å—Å—è.",
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(keyboard),
            )
    except FileNotFoundError:
        logger.error(f"MealContext by ID not found in food_choice_payment_stage2: {id}")
        await update.message.reply_text(
            text="–í–æ–∑–Ω–∏–∫–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –≤–∞—à–∏–º –∑–∞–∫–∞–∑–æ–º, –æ–Ω –ø–æ—Ç–µ—Ä—è–ª—Å—è.\n"+
            " –ü—Ä–∏–¥—ë—Ç—Å—è –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑: /food",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    return ConversationHandler.END

async def food_admin_get_csv(update: Update, context: CallbackContext):
    """Handle the /food_adm_csv command, requesting a photo."""
    if update.effective_user.id not in FOOD_ADMINS:
        return
    logger.info(f"Received /food_adm_csv command from {update.effective_user}")

    await update.message.reply_text(
        "–°–æ–∑–¥–∞—é CSV, –ø–æ–¥–æ–∂–¥–∏..."
    )
    try:
        filename = tempfile.mktemp()
        await get_csv(filename)
        await update.message.reply_document(
            filename,
            caption="–í–æ—Ç –æ–±–µ—â–∞–Ω–Ω—ã–π —Ñ–∞–π–ª–∏–∫ CSV",
            filename="menu.csv"
        )
        os.remove(filename)
    except:
        await update.message.reply_text("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        raise

# async def log_msg(update: Update, context: CallbackContext):
#     logger.info(f"got message from user {update.effective_user}: {update.message}")

async def error_handler(update, context):
    logger.error(msg="Exception while handling an update:", exc_info=context.error)


@asynccontextmanager
async def create_telegram_bot(config, app) -> Application:
    global web_app_base
    application = ApplicationBuilder().token(token=config.telegram_token).build()
    application.base_app = app

    web_app_base = config.server_base
    # Conversation handler for /–∞–≤–∞—Ç–∞—Ä command
    ava_handler = ConversationHandler(
        entry_points=[CommandHandler("avatar", avatar)],
        states={
            PHOTO: [
                MessageHandler(filters.PHOTO, photo),
                MessageHandler(filters.Document.IMAGE, photo_doc)
            ],
            CROPPER: [
                MessageHandler(filters.StatusUpdate.WEB_APP_DATA, image_crop_matrix),
                MessageHandler(filters.Regex(re.compile("^(–¢–∞–∫ —Å–æ–π–¥—ë—Ç)$", re.I)), autocrop),
            ],
            FINISH: [MessageHandler(filters.Regex(".*"), cancel_avatar)],
        },
        fallbacks=[
            CommandHandler("cancel", cancel_avatar),
            CommandHandler("avatar", reavatar),
            MessageHandler(filters.Regex(re.compile("^(Cancel|–û—Ç–º–µ–Ω–∞)$", re.I|re.U)), cancel_avatar)
        ],
    )
    food_handler = ConversationHandler(
        entry_points=[CommandHandler("food", food)],
        states={
            NAME: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND & ~filters.Regex(re.compile("^(Cancel|–û—Ç–º–µ–Ω–∞)$", re.I|re.U)),
                    food_for_who
                )
            ],
        },
        fallbacks=[
            CommandHandler("cancel", food_cancel),
            MessageHandler(filters.Regex(re.compile("^(Cancel|–û—Ç–º–µ–Ω–∞)$", re.I|re.U)), food_cancel)
        ],
    )
    food_stage2_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(food_choice_reply_payment, pattern="^FoodChoiceReplPaym|[a-zA-Z_\\-0-9]$"),
            CallbackQueryHandler(food_choice_reply_cancel, pattern="^FoodChoiceReplCanc|[a-zA-Z_\\-0-9]$"),
        ],
        states={
            WAITING_PAYMENT_PROOF: [
                MessageHandler(filters.PHOTO, food_choice_payment_photo),
                MessageHandler(filters.Document.ALL, food_choice_payment_doc)
            ],
        },
        fallbacks=[
            CommandHandler("cancel", food_choice_conversation_cancel),
            MessageHandler(
                filters.Regex(re.compile("^(Cancel|–û—Ç–º–µ–Ω–∞|–û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä –µ–¥—ã)$", re.I|re.U)),
                food_choice_conversation_cancel
            )
        ],
    )
    application.add_handler(CallbackQueryHandler(food_choice_admin_proof_confirmed, pattern="^FoodChoiceAdmConf|[a-zA-Z_\\-0-9]$"))
    application.add_handler(CallbackQueryHandler(food_choice_admin_proof_declined, pattern="^FoodChoiceAdmDecl|[a-zA-Z_\\-0-9]$"))

    application.add_handler(CommandHandler("food_adm_csv", food_admin_get_csv))
    application.add_handler(CommandHandler("start", start))
    application.add_handler(food_handler)
    application.add_handler(ava_handler)
    application.add_handler(food_stage2_handler)
    # application.add_handler(MessageHandler(filters.TEXT, log_msg))
    application.add_error_handler(error_handler)
    
    try:
        await application.initialize()
        await application.start()
        await application.updater.start_polling()

        app.bot = application
        yield application
    finally:
        app.bot = None
        await application.stop()
        await application.updater.stop()
        await application.shutdown()
